// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package order

import (
	"sync"

	"git.d.foundation/datcom/backend/models"
	"git.d.foundation/datcom/backend/src/domain"
)

var (
	lockServiceMockAdd    sync.RWMutex
	lockServiceMockDelete sync.RWMutex
	lockServiceMockExist  sync.RWMutex
	lockServiceMockGet    sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             AddFunc: func(o *domain.OrderInput) (*models.Order, error) {
// 	               panic("mock out the Add method")
//             },
//             DeleteFunc: func(o *domain.OrderInput) error {
// 	               panic("mock out the Delete method")
//             },
//             ExistFunc: func(o *domain.OrderInput) (bool, error) {
// 	               panic("mock out the Exist method")
//             },
//             GetFunc: func(userID int) ([]*domain.Item, error) {
// 	               panic("mock out the Get method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(o *domain.OrderInput) (*models.Order, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(o *domain.OrderInput) error

	// ExistFunc mocks the Exist method.
	ExistFunc func(o *domain.OrderInput) (bool, error)

	// GetFunc mocks the Get method.
	GetFunc func(userID int) ([]*domain.Item, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// O is the o argument value.
			O *domain.OrderInput
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// O is the o argument value.
			O *domain.OrderInput
		}
		// Exist holds details about calls to the Exist method.
		Exist []struct {
			// O is the o argument value.
			O *domain.OrderInput
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// UserID is the userID argument value.
			UserID int
		}
	}
}

// Add calls AddFunc.
func (mock *ServiceMock) Add(o *domain.OrderInput) (*models.Order, error) {
	if mock.AddFunc == nil {
		panic("ServiceMock.AddFunc: method is nil but Service.Add was just called")
	}
	callInfo := struct {
		O *domain.OrderInput
	}{
		O: o,
	}
	lockServiceMockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	lockServiceMockAdd.Unlock()
	return mock.AddFunc(o)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//     len(mockedService.AddCalls())
func (mock *ServiceMock) AddCalls() []struct {
	O *domain.OrderInput
} {
	var calls []struct {
		O *domain.OrderInput
	}
	lockServiceMockAdd.RLock()
	calls = mock.calls.Add
	lockServiceMockAdd.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceMock) Delete(o *domain.OrderInput) error {
	if mock.DeleteFunc == nil {
		panic("ServiceMock.DeleteFunc: method is nil but Service.Delete was just called")
	}
	callInfo := struct {
		O *domain.OrderInput
	}{
		O: o,
	}
	lockServiceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockServiceMockDelete.Unlock()
	return mock.DeleteFunc(o)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedService.DeleteCalls())
func (mock *ServiceMock) DeleteCalls() []struct {
	O *domain.OrderInput
} {
	var calls []struct {
		O *domain.OrderInput
	}
	lockServiceMockDelete.RLock()
	calls = mock.calls.Delete
	lockServiceMockDelete.RUnlock()
	return calls
}

// Exist calls ExistFunc.
func (mock *ServiceMock) Exist(o *domain.OrderInput) (bool, error) {
	if mock.ExistFunc == nil {
		panic("ServiceMock.ExistFunc: method is nil but Service.Exist was just called")
	}
	callInfo := struct {
		O *domain.OrderInput
	}{
		O: o,
	}
	lockServiceMockExist.Lock()
	mock.calls.Exist = append(mock.calls.Exist, callInfo)
	lockServiceMockExist.Unlock()
	return mock.ExistFunc(o)
}

// ExistCalls gets all the calls that were made to Exist.
// Check the length with:
//     len(mockedService.ExistCalls())
func (mock *ServiceMock) ExistCalls() []struct {
	O *domain.OrderInput
} {
	var calls []struct {
		O *domain.OrderInput
	}
	lockServiceMockExist.RLock()
	calls = mock.calls.Exist
	lockServiceMockExist.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceMock) Get(userID int) ([]*domain.Item, error) {
	if mock.GetFunc == nil {
		panic("ServiceMock.GetFunc: method is nil but Service.Get was just called")
	}
	callInfo := struct {
		UserID int
	}{
		UserID: userID,
	}
	lockServiceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceMockGet.Unlock()
	return mock.GetFunc(userID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedService.GetCalls())
func (mock *ServiceMock) GetCalls() []struct {
	UserID int
} {
	var calls []struct {
		UserID int
	}
	lockServiceMockGet.RLock()
	calls = mock.calls.Get
	lockServiceMockGet.RUnlock()
	return calls
}
