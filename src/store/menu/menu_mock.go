// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package menu

import (
	"git.d.foundation/datcom/backend/models"
	"git.d.foundation/datcom/backend/src/domain"
	"sync"
)

var (
	lockServiceMockCheckMenuExist sync.RWMutex
	lockServiceMockFindByID       sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CheckMenuExistFunc: func(menuID int) (bool, error) {
// 	               panic("mock out the CheckMenuExist method")
//             },
//             FindByIDFunc: func(mn *domain.MenuInput) (*models.Menu, error) {
// 	               panic("mock out the FindByID method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CheckMenuExistFunc mocks the CheckMenuExist method.
	CheckMenuExistFunc func(menuID int) (bool, error)

	// FindByIDFunc mocks the FindByID method.
	FindByIDFunc func(mn *domain.MenuInput) (*models.Menu, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckMenuExist holds details about calls to the CheckMenuExist method.
		CheckMenuExist []struct {
			// MenuID is the menuID argument value.
			MenuID int
		}
		// FindByID holds details about calls to the FindByID method.
		FindByID []struct {
			// Mn is the mn argument value.
			Mn *domain.MenuInput
		}
	}
}

// CheckMenuExist calls CheckMenuExistFunc.
func (mock *ServiceMock) CheckMenuExist(menuID int) (bool, error) {
	if mock.CheckMenuExistFunc == nil {
		panic("ServiceMock.CheckMenuExistFunc: method is nil but Service.CheckMenuExist was just called")
	}
	callInfo := struct {
		MenuID int
	}{
		MenuID: menuID,
	}
	lockServiceMockCheckMenuExist.Lock()
	mock.calls.CheckMenuExist = append(mock.calls.CheckMenuExist, callInfo)
	lockServiceMockCheckMenuExist.Unlock()
	return mock.CheckMenuExistFunc(menuID)
}

// CheckMenuExistCalls gets all the calls that were made to CheckMenuExist.
// Check the length with:
//     len(mockedService.CheckMenuExistCalls())
func (mock *ServiceMock) CheckMenuExistCalls() []struct {
	MenuID int
} {
	var calls []struct {
		MenuID int
	}
	lockServiceMockCheckMenuExist.RLock()
	calls = mock.calls.CheckMenuExist
	lockServiceMockCheckMenuExist.RUnlock()
	return calls
}

// FindByID calls FindByIDFunc.
func (mock *ServiceMock) FindByID(mn *domain.MenuInput) (*models.Menu, error) {
	if mock.FindByIDFunc == nil {
		panic("ServiceMock.FindByIDFunc: method is nil but Service.FindByID was just called")
	}
	callInfo := struct {
		Mn *domain.MenuInput
	}{
		Mn: mn,
	}
	lockServiceMockFindByID.Lock()
	mock.calls.FindByID = append(mock.calls.FindByID, callInfo)
	lockServiceMockFindByID.Unlock()
	return mock.FindByIDFunc(mn)
}

// FindByIDCalls gets all the calls that were made to FindByID.
// Check the length with:
//     len(mockedService.FindByIDCalls())
func (mock *ServiceMock) FindByIDCalls() []struct {
	Mn *domain.MenuInput
} {
	var calls []struct {
		Mn *domain.MenuInput
	}
	lockServiceMockFindByID.RLock()
	calls = mock.calls.FindByID
	lockServiceMockFindByID.RUnlock()
	return calls
}
