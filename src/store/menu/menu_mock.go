// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package menu

import (
	"sync"

	"git.d.foundation/datcom/backend/models"
	"git.d.foundation/datcom/backend/src/domain"
)

var (
	lockServiceMockCreate     sync.RWMutex
	lockServiceMockFindByName sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CreateFunc: func(p *domain.MenuInput) (*models.Menu, error) {
// 	               panic("mock out the Create method")
//             },
//             FindByNameFunc: func(menuName string) (*models.Menu, error) {
// 	               panic("mock out the FindByName method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(p *domain.MenuInput) (*models.Menu, error)

	// FindByNameFunc mocks the FindByName method.
	FindByNameFunc func(menuName string) (*models.Menu, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// P is the p argument value.
			P *domain.MenuInput
		}
		// FindByName holds details about calls to the FindByName method.
		FindByName []struct {
			// MenuName is the menuName argument value.
			MenuName string
		}
	}
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(p *domain.MenuInput) (*models.Menu, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		P *domain.MenuInput
	}{
		P: p,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(p)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	P *domain.MenuInput
} {
	var calls []struct {
		P *domain.MenuInput
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// FindByName calls FindByNameFunc.
func (mock *ServiceMock) FindByName(menuName string) (*models.Menu, error) {
	if mock.FindByNameFunc == nil {
		panic("ServiceMock.FindByNameFunc: method is nil but Service.FindByName was just called")
	}
	callInfo := struct {
		MenuName string
	}{
		MenuName: menuName,
	}
	lockServiceMockFindByName.Lock()
	mock.calls.FindByName = append(mock.calls.FindByName, callInfo)
	lockServiceMockFindByName.Unlock()
	return mock.FindByNameFunc(menuName)
}

// FindByNameCalls gets all the calls that were made to FindByName.
// Check the length with:
//     len(mockedService.FindByNameCalls())
func (mock *ServiceMock) FindByNameCalls() []struct {
	MenuName string
} {
	var calls []struct {
		MenuName string
	}
	lockServiceMockFindByName.RLock()
	calls = mock.calls.FindByName
	lockServiceMockFindByName.RUnlock()
	return calls
}
