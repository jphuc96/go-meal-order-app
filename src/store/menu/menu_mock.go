// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package menu

import (
	"database/sql"
	"git.d.foundation/datcom/backend/models"
	"git.d.foundation/datcom/backend/src/domain"
	"sync"
)

var (
	lockServiceMockCheckMenuExist   sync.RWMutex
	lockServiceMockCreate           sync.RWMutex
	lockServiceMockFindByID         sync.RWMutex
	lockServiceMockGetLatestMenu    sync.RWMutex
	lockServiceMockIsMenuNameUnique sync.RWMutex
	lockServiceMockUpdateMenu       sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CheckMenuExistFunc: func(tx *sql.Tx, menuID int) (bool, error) {
// 	               panic("mock out the CheckMenuExist method")
//             },
//             CreateFunc: func(tx *sql.Tx, p *domain.MenuInput) (*models.Menu, error) {
// 	               panic("mock out the Create method")
//             },
//             FindByIDFunc: func(tx *sql.Tx, menuID int) (*models.Menu, error) {
// 	               panic("mock out the FindByID method")
//             },
//             GetLatestMenuFunc: func(tx *sql.Tx) (*models.Menu, error) {
// 	               panic("mock out the GetLatestMenu method")
//             },
//             IsMenuNameUniqueFunc: func(tx *sql.Tx, menuName string) (bool, error) {
// 	               panic("mock out the IsMenuNameUnique method")
//             },
//             UpdateMenuFunc: func(tx *sql.Tx, menuID int, updateMenu *models.Menu) error {
// 	               panic("mock out the UpdateMenu method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CheckMenuExistFunc mocks the CheckMenuExist method.
	CheckMenuExistFunc func(tx *sql.Tx, menuID int) (bool, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(tx *sql.Tx, p *domain.MenuInput) (*models.Menu, error)

	// FindByIDFunc mocks the FindByID method.
	FindByIDFunc func(tx *sql.Tx, menuID int) (*models.Menu, error)

	// GetLatestMenuFunc mocks the GetLatestMenu method.
	GetLatestMenuFunc func(tx *sql.Tx) (*models.Menu, error)

	// IsMenuNameUniqueFunc mocks the IsMenuNameUnique method.
	IsMenuNameUniqueFunc func(tx *sql.Tx, menuName string) (bool, error)

	// UpdateMenuFunc mocks the UpdateMenu method.
	UpdateMenuFunc func(tx *sql.Tx, menuID int, updateMenu *models.Menu) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckMenuExist holds details about calls to the CheckMenuExist method.
		CheckMenuExist []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// MenuID is the menuID argument value.
			MenuID int
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// P is the p argument value.
			P *domain.MenuInput
		}
		// FindByID holds details about calls to the FindByID method.
		FindByID []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// MenuID is the menuID argument value.
			MenuID int
		}
		// GetLatestMenu holds details about calls to the GetLatestMenu method.
		GetLatestMenu []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
		}
		// IsMenuNameUnique holds details about calls to the IsMenuNameUnique method.
		IsMenuNameUnique []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// MenuName is the menuName argument value.
			MenuName string
		}
		// UpdateMenu holds details about calls to the UpdateMenu method.
		UpdateMenu []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// MenuID is the menuID argument value.
			MenuID int
			// UpdateMenu is the updateMenu argument value.
			UpdateMenu *models.Menu
		}
	}
}

// CheckMenuExist calls CheckMenuExistFunc.
func (mock *ServiceMock) CheckMenuExist(tx *sql.Tx, menuID int) (bool, error) {
	if mock.CheckMenuExistFunc == nil {
		panic("ServiceMock.CheckMenuExistFunc: method is nil but Service.CheckMenuExist was just called")
	}
	callInfo := struct {
		Tx     *sql.Tx
		MenuID int
	}{
		Tx:     tx,
		MenuID: menuID,
	}
	lockServiceMockCheckMenuExist.Lock()
	mock.calls.CheckMenuExist = append(mock.calls.CheckMenuExist, callInfo)
	lockServiceMockCheckMenuExist.Unlock()
	return mock.CheckMenuExistFunc(tx, menuID)
}

// CheckMenuExistCalls gets all the calls that were made to CheckMenuExist.
// Check the length with:
//     len(mockedService.CheckMenuExistCalls())
func (mock *ServiceMock) CheckMenuExistCalls() []struct {
	Tx     *sql.Tx
	MenuID int
} {
	var calls []struct {
		Tx     *sql.Tx
		MenuID int
	}
	lockServiceMockCheckMenuExist.RLock()
	calls = mock.calls.CheckMenuExist
	lockServiceMockCheckMenuExist.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(tx *sql.Tx, p *domain.MenuInput) (*models.Menu, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		Tx *sql.Tx
		P  *domain.MenuInput
	}{
		Tx: tx,
		P:  p,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(tx, p)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	Tx *sql.Tx
	P  *domain.MenuInput
} {
	var calls []struct {
		Tx *sql.Tx
		P  *domain.MenuInput
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// FindByID calls FindByIDFunc.
func (mock *ServiceMock) FindByID(tx *sql.Tx, menuID int) (*models.Menu, error) {
	if mock.FindByIDFunc == nil {
		panic("ServiceMock.FindByIDFunc: method is nil but Service.FindByID was just called")
	}
	callInfo := struct {
		Tx     *sql.Tx
		MenuID int
	}{
		Tx:     tx,
		MenuID: menuID,
	}
	lockServiceMockFindByID.Lock()
	mock.calls.FindByID = append(mock.calls.FindByID, callInfo)
	lockServiceMockFindByID.Unlock()
	return mock.FindByIDFunc(tx, menuID)
}

// FindByIDCalls gets all the calls that were made to FindByID.
// Check the length with:
//     len(mockedService.FindByIDCalls())
func (mock *ServiceMock) FindByIDCalls() []struct {
	Tx     *sql.Tx
	MenuID int
} {
	var calls []struct {
		Tx     *sql.Tx
		MenuID int
	}
	lockServiceMockFindByID.RLock()
	calls = mock.calls.FindByID
	lockServiceMockFindByID.RUnlock()
	return calls
}

// GetLatestMenu calls GetLatestMenuFunc.
func (mock *ServiceMock) GetLatestMenu(tx *sql.Tx) (*models.Menu, error) {
	if mock.GetLatestMenuFunc == nil {
		panic("ServiceMock.GetLatestMenuFunc: method is nil but Service.GetLatestMenu was just called")
	}
	callInfo := struct {
		Tx *sql.Tx
	}{
		Tx: tx,
	}
	lockServiceMockGetLatestMenu.Lock()
	mock.calls.GetLatestMenu = append(mock.calls.GetLatestMenu, callInfo)
	lockServiceMockGetLatestMenu.Unlock()
	return mock.GetLatestMenuFunc(tx)
}

// GetLatestMenuCalls gets all the calls that were made to GetLatestMenu.
// Check the length with:
//     len(mockedService.GetLatestMenuCalls())
func (mock *ServiceMock) GetLatestMenuCalls() []struct {
	Tx *sql.Tx
} {
	var calls []struct {
		Tx *sql.Tx
	}
	lockServiceMockGetLatestMenu.RLock()
	calls = mock.calls.GetLatestMenu
	lockServiceMockGetLatestMenu.RUnlock()
	return calls
}

// IsMenuNameUnique calls IsMenuNameUniqueFunc.
func (mock *ServiceMock) IsMenuNameUnique(tx *sql.Tx, menuName string) (bool, error) {
	if mock.IsMenuNameUniqueFunc == nil {
		panic("ServiceMock.IsMenuNameUniqueFunc: method is nil but Service.IsMenuNameUnique was just called")
	}
	callInfo := struct {
		Tx       *sql.Tx
		MenuName string
	}{
		Tx:       tx,
		MenuName: menuName,
	}
	lockServiceMockIsMenuNameUnique.Lock()
	mock.calls.IsMenuNameUnique = append(mock.calls.IsMenuNameUnique, callInfo)
	lockServiceMockIsMenuNameUnique.Unlock()
	return mock.IsMenuNameUniqueFunc(tx, menuName)
}

// IsMenuNameUniqueCalls gets all the calls that were made to IsMenuNameUnique.
// Check the length with:
//     len(mockedService.IsMenuNameUniqueCalls())
func (mock *ServiceMock) IsMenuNameUniqueCalls() []struct {
	Tx       *sql.Tx
	MenuName string
} {
	var calls []struct {
		Tx       *sql.Tx
		MenuName string
	}
	lockServiceMockIsMenuNameUnique.RLock()
	calls = mock.calls.IsMenuNameUnique
	lockServiceMockIsMenuNameUnique.RUnlock()
	return calls
}

// UpdateMenu calls UpdateMenuFunc.
func (mock *ServiceMock) UpdateMenu(tx *sql.Tx, menuID int, updateMenu *models.Menu) error {
	if mock.UpdateMenuFunc == nil {
		panic("ServiceMock.UpdateMenuFunc: method is nil but Service.UpdateMenu was just called")
	}
	callInfo := struct {
		Tx         *sql.Tx
		MenuID     int
		UpdateMenu *models.Menu
	}{
		Tx:         tx,
		MenuID:     menuID,
		UpdateMenu: updateMenu,
	}
	lockServiceMockUpdateMenu.Lock()
	mock.calls.UpdateMenu = append(mock.calls.UpdateMenu, callInfo)
	lockServiceMockUpdateMenu.Unlock()
	return mock.UpdateMenuFunc(tx, menuID, updateMenu)
}

// UpdateMenuCalls gets all the calls that were made to UpdateMenu.
// Check the length with:
//     len(mockedService.UpdateMenuCalls())
func (mock *ServiceMock) UpdateMenuCalls() []struct {
	Tx         *sql.Tx
	MenuID     int
	UpdateMenu *models.Menu
} {
	var calls []struct {
		Tx         *sql.Tx
		MenuID     int
		UpdateMenu *models.Menu
	}
	lockServiceMockUpdateMenu.RLock()
	calls = mock.calls.UpdateMenu
	lockServiceMockUpdateMenu.RUnlock()
	return calls
}
