// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package menu

import (
	"git.d.foundation/datcom/backend/models"
	"git.d.foundation/datcom/backend/src/domain"
	"sync"
)

var (
	lockServiceMockCheckMenuExist   sync.RWMutex
	lockServiceMockCreate           sync.RWMutex
	lockServiceMockIsMenuNameUnique sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CheckMenuExistFunc: func(menuID int) (bool, error) {
// 	               panic("mock out the CheckMenuExist method")
//             },
//             CreateFunc: func(p *domain.CreateMenuInput) (*models.Menu, error) {
// 	               panic("mock out the Create method")
//             },
//             IsMenuNameUniqueFunc: func(menuName string) (bool, error) {
// 	               panic("mock out the IsMenuNameUnique method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CheckMenuExistFunc mocks the CheckMenuExist method.
	CheckMenuExistFunc func(menuID int) (bool, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(p *domain.CreateMenuInput) (*models.Menu, error)

	// IsMenuNameUniqueFunc mocks the IsMenuNameUnique method.
	IsMenuNameUniqueFunc func(menuName string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckMenuExist holds details about calls to the CheckMenuExist method.
		CheckMenuExist []struct {
			// MenuID is the menuID argument value.
			MenuID int
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// P is the p argument value.
			P *domain.CreateMenuInput
		}
		// IsMenuNameUnique holds details about calls to the IsMenuNameUnique method.
		IsMenuNameUnique []struct {
			// MenuName is the menuName argument value.
			MenuName string
		}
	}
}

// CheckMenuExist calls CheckMenuExistFunc.
func (mock *ServiceMock) CheckMenuExist(menuID int) (bool, error) {
	if mock.CheckMenuExistFunc == nil {
		panic("ServiceMock.CheckMenuExistFunc: method is nil but Service.CheckMenuExist was just called")
	}
	callInfo := struct {
		MenuID int
	}{
		MenuID: menuID,
	}
	lockServiceMockCheckMenuExist.Lock()
	mock.calls.CheckMenuExist = append(mock.calls.CheckMenuExist, callInfo)
	lockServiceMockCheckMenuExist.Unlock()
	return mock.CheckMenuExistFunc(menuID)
}

// CheckMenuExistCalls gets all the calls that were made to CheckMenuExist.
// Check the length with:
//     len(mockedService.CheckMenuExistCalls())
func (mock *ServiceMock) CheckMenuExistCalls() []struct {
	MenuID int
} {
	var calls []struct {
		MenuID int
	}
	lockServiceMockCheckMenuExist.RLock()
	calls = mock.calls.CheckMenuExist
	lockServiceMockCheckMenuExist.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(p *domain.CreateMenuInput) (*models.Menu, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		P *domain.CreateMenuInput
	}{
		P: p,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(p)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	P *domain.CreateMenuInput
} {
	var calls []struct {
		P *domain.CreateMenuInput
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// IsMenuNameUnique calls IsMenuNameUniqueFunc.
func (mock *ServiceMock) IsMenuNameUnique(menuName string) (bool, error) {
	if mock.IsMenuNameUniqueFunc == nil {
		panic("ServiceMock.IsMenuNameUniqueFunc: method is nil but Service.IsMenuNameUnique was just called")
	}
	callInfo := struct {
		MenuName string
	}{
		MenuName: menuName,
	}
	lockServiceMockIsMenuNameUnique.Lock()
	mock.calls.IsMenuNameUnique = append(mock.calls.IsMenuNameUnique, callInfo)
	lockServiceMockIsMenuNameUnique.Unlock()
	return mock.IsMenuNameUniqueFunc(menuName)
}

// IsMenuNameUniqueCalls gets all the calls that were made to IsMenuNameUnique.
// Check the length with:
//     len(mockedService.IsMenuNameUniqueCalls())
func (mock *ServiceMock) IsMenuNameUniqueCalls() []struct {
	MenuName string
} {
	var calls []struct {
		MenuName string
	}
	lockServiceMockIsMenuNameUnique.RLock()
	calls = mock.calls.IsMenuNameUnique
	lockServiceMockIsMenuNameUnique.RUnlock()
	return calls
}
