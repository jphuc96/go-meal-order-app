// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package pic

import (
	"git.d.foundation/datcom/backend/models"
	"git.d.foundation/datcom/backend/src/domain"
	"sync"
)

var (
	lockServiceMockAdd         sync.RWMutex
	lockServiceMockExist       sync.RWMutex
	lockServiceMockGetByMenuID sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             AddFunc: func(p *domain.PICInput) (*models.PeopleInCharge, error) {
// 	               panic("mock out the Add method")
//             },
//             ExistFunc: func(p *domain.PICInput) (bool, error) {
// 	               panic("mock out the Exist method")
//             },
//             GetByMenuIDFunc: func(menuID int) ([]*models.PeopleInCharge, error) {
// 	               panic("mock out the GetByMenuID method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(p *domain.PICInput) (*models.PeopleInCharge, error)

	// ExistFunc mocks the Exist method.
	ExistFunc func(p *domain.PICInput) (bool, error)

	// GetByMenuIDFunc mocks the GetByMenuID method.
	GetByMenuIDFunc func(menuID int) ([]*models.PeopleInCharge, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// P is the p argument value.
			P *domain.PICInput
		}
		// Exist holds details about calls to the Exist method.
		Exist []struct {
			// P is the p argument value.
			P *domain.PICInput
		}
		// GetByMenuID holds details about calls to the GetByMenuID method.
		GetByMenuID []struct {
			// MenuID is the menuID argument value.
			MenuID int
		}
	}
}

// Add calls AddFunc.
func (mock *ServiceMock) Add(p *domain.PICInput) (*models.PeopleInCharge, error) {
	if mock.AddFunc == nil {
		panic("ServiceMock.AddFunc: method is nil but Service.Add was just called")
	}
	callInfo := struct {
		P *domain.PICInput
	}{
		P: p,
	}
	lockServiceMockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	lockServiceMockAdd.Unlock()
	return mock.AddFunc(p)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//     len(mockedService.AddCalls())
func (mock *ServiceMock) AddCalls() []struct {
	P *domain.PICInput
} {
	var calls []struct {
		P *domain.PICInput
	}
	lockServiceMockAdd.RLock()
	calls = mock.calls.Add
	lockServiceMockAdd.RUnlock()
	return calls
}

// Exist calls ExistFunc.
func (mock *ServiceMock) Exist(p *domain.PICInput) (bool, error) {
	if mock.ExistFunc == nil {
		panic("ServiceMock.ExistFunc: method is nil but Service.Exist was just called")
	}
	callInfo := struct {
		P *domain.PICInput
	}{
		P: p,
	}
	lockServiceMockExist.Lock()
	mock.calls.Exist = append(mock.calls.Exist, callInfo)
	lockServiceMockExist.Unlock()
	return mock.ExistFunc(p)
}

// ExistCalls gets all the calls that were made to Exist.
// Check the length with:
//     len(mockedService.ExistCalls())
func (mock *ServiceMock) ExistCalls() []struct {
	P *domain.PICInput
} {
	var calls []struct {
		P *domain.PICInput
	}
	lockServiceMockExist.RLock()
	calls = mock.calls.Exist
	lockServiceMockExist.RUnlock()
	return calls
}

// GetByMenuID calls GetByMenuIDFunc.
func (mock *ServiceMock) GetByMenuID(menuID int) ([]*models.PeopleInCharge, error) {
	if mock.GetByMenuIDFunc == nil {
		panic("ServiceMock.GetByMenuIDFunc: method is nil but Service.GetByMenuID was just called")
	}
	callInfo := struct {
		MenuID int
	}{
		MenuID: menuID,
	}
	lockServiceMockGetByMenuID.Lock()
	mock.calls.GetByMenuID = append(mock.calls.GetByMenuID, callInfo)
	lockServiceMockGetByMenuID.Unlock()
	return mock.GetByMenuIDFunc(menuID)
}

// GetByMenuIDCalls gets all the calls that were made to GetByMenuID.
// Check the length with:
//     len(mockedService.GetByMenuIDCalls())
func (mock *ServiceMock) GetByMenuIDCalls() []struct {
	MenuID int
} {
	var calls []struct {
		MenuID int
	}
	lockServiceMockGetByMenuID.RLock()
	calls = mock.calls.GetByMenuID
	lockServiceMockGetByMenuID.RUnlock()
	return calls
}
