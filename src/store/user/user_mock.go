// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"database/sql"
	"git.d.foundation/datcom/backend/models"
	"git.d.foundation/datcom/backend/src/domain"
	"sync"
)

var (
	lockServiceMockCreate       sync.RWMutex
	lockServiceMockExist        sync.RWMutex
	lockServiceMockExistByToken sync.RWMutex
	lockServiceMockFind         sync.RWMutex
	lockServiceMockFindAll      sync.RWMutex
	lockServiceMockGetByID      sync.RWMutex
	lockServiceMockGetByToken   sync.RWMutex
	lockServiceMockUpdateToken  sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CreateFunc: func(tx *sql.Tx, p *domain.UserInput) (*models.User, error) {
// 	               panic("mock out the Create method")
//             },
//             ExistFunc: func(p *domain.UserInput) (bool, error) {
// 	               panic("mock out the Exist method")
//             },
//             ExistByTokenFunc: func(token string) (bool, error) {
// 	               panic("mock out the ExistByToken method")
//             },
//             FindFunc: func(tx *sql.Tx, p *domain.UserInput) (*models.User, error) {
// 	               panic("mock out the Find method")
//             },
//             FindAllFunc: func() ([]*models.User, error) {
// 	               panic("mock out the FindAll method")
//             },
//             GetByIDFunc: func(tx *sql.Tx, userID int) (*models.User, error) {
// 	               panic("mock out the GetByID method")
//             },
//             GetByTokenFunc: func(tx *sql.Tx, tok string) (*models.User, error) {
// 	               panic("mock out the GetByToken method")
//             },
//             UpdateTokenFunc: func(tx *sql.Tx, p *domain.UserInput, newToken string) error {
// 	               panic("mock out the UpdateToken method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(tx *sql.Tx, p *domain.UserInput) (*models.User, error)

	// ExistFunc mocks the Exist method.
	ExistFunc func(p *domain.UserInput) (bool, error)

	// ExistByTokenFunc mocks the ExistByToken method.
	ExistByTokenFunc func(token string) (bool, error)

	// FindFunc mocks the Find method.
	FindFunc func(tx *sql.Tx, p *domain.UserInput) (*models.User, error)

	// FindAllFunc mocks the FindAll method.
	FindAllFunc func() ([]*models.User, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(tx *sql.Tx, userID int) (*models.User, error)

	// GetByTokenFunc mocks the GetByToken method.
	GetByTokenFunc func(tx *sql.Tx, tok string) (*models.User, error)

	// UpdateTokenFunc mocks the UpdateToken method.
	UpdateTokenFunc func(tx *sql.Tx, p *domain.UserInput, newToken string) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// P is the p argument value.
			P *domain.UserInput
		}
		// Exist holds details about calls to the Exist method.
		Exist []struct {
			// P is the p argument value.
			P *domain.UserInput
		}
		// ExistByToken holds details about calls to the ExistByToken method.
		ExistByToken []struct {
			// Token is the token argument value.
			Token string
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// P is the p argument value.
			P *domain.UserInput
		}
		// FindAll holds details about calls to the FindAll method.
		FindAll []struct {
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// UserID is the userID argument value.
			UserID int
		}
		// GetByToken holds details about calls to the GetByToken method.
		GetByToken []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// Tok is the tok argument value.
			Tok string
		}
		// UpdateToken holds details about calls to the UpdateToken method.
		UpdateToken []struct {
			// Tx is the tx argument value.
			Tx *sql.Tx
			// P is the p argument value.
			P *domain.UserInput
			// NewToken is the newToken argument value.
			NewToken string
		}
	}
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(tx *sql.Tx, p *domain.UserInput) (*models.User, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		Tx *sql.Tx
		P  *domain.UserInput
	}{
		Tx: tx,
		P:  p,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(tx, p)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	Tx *sql.Tx
	P  *domain.UserInput
} {
	var calls []struct {
		Tx *sql.Tx
		P  *domain.UserInput
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// Exist calls ExistFunc.
func (mock *ServiceMock) Exist(p *domain.UserInput) (bool, error) {
	if mock.ExistFunc == nil {
		panic("ServiceMock.ExistFunc: method is nil but Service.Exist was just called")
	}
	callInfo := struct {
		P *domain.UserInput
	}{
		P: p,
	}
	lockServiceMockExist.Lock()
	mock.calls.Exist = append(mock.calls.Exist, callInfo)
	lockServiceMockExist.Unlock()
	return mock.ExistFunc(p)
}

// ExistCalls gets all the calls that were made to Exist.
// Check the length with:
//     len(mockedService.ExistCalls())
func (mock *ServiceMock) ExistCalls() []struct {
	P *domain.UserInput
} {
	var calls []struct {
		P *domain.UserInput
	}
	lockServiceMockExist.RLock()
	calls = mock.calls.Exist
	lockServiceMockExist.RUnlock()
	return calls
}

// ExistByToken calls ExistByTokenFunc.
func (mock *ServiceMock) ExistByToken(token string) (bool, error) {
	if mock.ExistByTokenFunc == nil {
		panic("ServiceMock.ExistByTokenFunc: method is nil but Service.ExistByToken was just called")
	}
	callInfo := struct {
		Token string
	}{
		Token: token,
	}
	lockServiceMockExistByToken.Lock()
	mock.calls.ExistByToken = append(mock.calls.ExistByToken, callInfo)
	lockServiceMockExistByToken.Unlock()
	return mock.ExistByTokenFunc(token)
}

// ExistByTokenCalls gets all the calls that were made to ExistByToken.
// Check the length with:
//     len(mockedService.ExistByTokenCalls())
func (mock *ServiceMock) ExistByTokenCalls() []struct {
	Token string
} {
	var calls []struct {
		Token string
	}
	lockServiceMockExistByToken.RLock()
	calls = mock.calls.ExistByToken
	lockServiceMockExistByToken.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *ServiceMock) Find(tx *sql.Tx, p *domain.UserInput) (*models.User, error) {
	if mock.FindFunc == nil {
		panic("ServiceMock.FindFunc: method is nil but Service.Find was just called")
	}
	callInfo := struct {
		Tx *sql.Tx
		P  *domain.UserInput
	}{
		Tx: tx,
		P:  p,
	}
	lockServiceMockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	lockServiceMockFind.Unlock()
	return mock.FindFunc(tx, p)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedService.FindCalls())
func (mock *ServiceMock) FindCalls() []struct {
	Tx *sql.Tx
	P  *domain.UserInput
} {
	var calls []struct {
		Tx *sql.Tx
		P  *domain.UserInput
	}
	lockServiceMockFind.RLock()
	calls = mock.calls.Find
	lockServiceMockFind.RUnlock()
	return calls
}

// FindAll calls FindAllFunc.
func (mock *ServiceMock) FindAll() ([]*models.User, error) {
	if mock.FindAllFunc == nil {
		panic("ServiceMock.FindAllFunc: method is nil but Service.FindAll was just called")
	}
	callInfo := struct {
	}{}
	lockServiceMockFindAll.Lock()
	mock.calls.FindAll = append(mock.calls.FindAll, callInfo)
	lockServiceMockFindAll.Unlock()
	return mock.FindAllFunc()
}

// FindAllCalls gets all the calls that were made to FindAll.
// Check the length with:
//     len(mockedService.FindAllCalls())
func (mock *ServiceMock) FindAllCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceMockFindAll.RLock()
	calls = mock.calls.FindAll
	lockServiceMockFindAll.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *ServiceMock) GetByID(tx *sql.Tx, userID int) (*models.User, error) {
	if mock.GetByIDFunc == nil {
		panic("ServiceMock.GetByIDFunc: method is nil but Service.GetByID was just called")
	}
	callInfo := struct {
		Tx     *sql.Tx
		UserID int
	}{
		Tx:     tx,
		UserID: userID,
	}
	lockServiceMockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	lockServiceMockGetByID.Unlock()
	return mock.GetByIDFunc(tx, userID)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedService.GetByIDCalls())
func (mock *ServiceMock) GetByIDCalls() []struct {
	Tx     *sql.Tx
	UserID int
} {
	var calls []struct {
		Tx     *sql.Tx
		UserID int
	}
	lockServiceMockGetByID.RLock()
	calls = mock.calls.GetByID
	lockServiceMockGetByID.RUnlock()
	return calls
}

// GetByToken calls GetByTokenFunc.
func (mock *ServiceMock) GetByToken(tx *sql.Tx, tok string) (*models.User, error) {
	if mock.GetByTokenFunc == nil {
		panic("ServiceMock.GetByTokenFunc: method is nil but Service.GetByToken was just called")
	}
	callInfo := struct {
		Tx  *sql.Tx
		Tok string
	}{
		Tx:  tx,
		Tok: tok,
	}
	lockServiceMockGetByToken.Lock()
	mock.calls.GetByToken = append(mock.calls.GetByToken, callInfo)
	lockServiceMockGetByToken.Unlock()
	return mock.GetByTokenFunc(tx, tok)
}

// GetByTokenCalls gets all the calls that were made to GetByToken.
// Check the length with:
//     len(mockedService.GetByTokenCalls())
func (mock *ServiceMock) GetByTokenCalls() []struct {
	Tx  *sql.Tx
	Tok string
} {
	var calls []struct {
		Tx  *sql.Tx
		Tok string
	}
	lockServiceMockGetByToken.RLock()
	calls = mock.calls.GetByToken
	lockServiceMockGetByToken.RUnlock()
	return calls
}

// UpdateToken calls UpdateTokenFunc.
func (mock *ServiceMock) UpdateToken(tx *sql.Tx, p *domain.UserInput, newToken string) error {
	if mock.UpdateTokenFunc == nil {
		panic("ServiceMock.UpdateTokenFunc: method is nil but Service.UpdateToken was just called")
	}
	callInfo := struct {
		Tx       *sql.Tx
		P        *domain.UserInput
		NewToken string
	}{
		Tx:       tx,
		P:        p,
		NewToken: newToken,
	}
	lockServiceMockUpdateToken.Lock()
	mock.calls.UpdateToken = append(mock.calls.UpdateToken, callInfo)
	lockServiceMockUpdateToken.Unlock()
	return mock.UpdateTokenFunc(tx, p, newToken)
}

// UpdateTokenCalls gets all the calls that were made to UpdateToken.
// Check the length with:
//     len(mockedService.UpdateTokenCalls())
func (mock *ServiceMock) UpdateTokenCalls() []struct {
	Tx       *sql.Tx
	P        *domain.UserInput
	NewToken string
} {
	var calls []struct {
		Tx       *sql.Tx
		P        *domain.UserInput
		NewToken string
	}
	lockServiceMockUpdateToken.RLock()
	calls = mock.calls.UpdateToken
	lockServiceMockUpdateToken.RUnlock()
	return calls
}
